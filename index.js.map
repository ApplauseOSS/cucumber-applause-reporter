{"version":3,"file":"index.js","sources":["../src/reporter.ts"],"sourcesContent":["import { Formatter, IFormatterOptions } from '@cucumber/cucumber';\nimport { AutoApi, TestResultStatus } from 'auto-api-client-js';\nimport { EventEmitter } from 'events';\nimport {\n  Envelope,\n  Pickle,\n  TestCase,\n  TestCaseFinished,\n  TestCaseStarted,\n  TestStepFinished,\n  TestStepResultStatus,\n} from '@cucumber/messages';\n\nexport default class CucumberAutoApiFormatter extends Formatter {\n  private autoApi: AutoApi;\n\n  // Custom Parameters\n  private productId: number;\n  private runName: string;\n\n  // Maps used to handle data lookup between events.\n  // Test Case Storage Handles Storing Information about a TestCase by the TestCaseId\n  private testCaseStorage: { [testCaseId: string]: TestCase } = {};\n  // Test Case Instance Map Maps a TestCaseInstance Id (Single Execution of a TestCase) to the TestCaseId\n  private testCaseInstanceMap: { [testCaseInstanceId: string]: string } = {};\n  // Test Instance ResultId Map Holds References to the TestResult creation promise\n  private testCaseInstanceResultIdMap: {\n    [testCaseInstanceId: string]: Promise<number>;\n  } = {};\n  // Pickle Map Holds Information about the Gherkin TestCase Information (The actual written out test case)\n  private pickleMap: { [pickleId: string]: Pickle } = {};\n  // TestResult Status Map keeps track of the status for a TestCaseInstance. If a step fails, the test case fails\n  private testResultStatusMap: {\n    [testCaseInstanceId: string]: [TestResultStatus, string | undefined];\n  } = {};\n\n  constructor(options: IFormatterOptions) {\n    super(options);\n\n    // Extract out any arguments and handle validation\n    const apiKey = <string>options.parsedArgvOptions['apiKey'];\n    const autoApiUrl = <string>options.parsedArgvOptions['autoApiUrl'];\n    this.runName = <string>options.parsedArgvOptions['runName'];\n    this.productId = <number>options.parsedArgvOptions['productId'];\n    if (apiKey == undefined || apiKey.length <= 0) {\n      throw new Error('Invalid Api Key');\n    } else if (this.runName == undefined || this.runName.length <= 0) {\n      throw new Error('Invalid Run Name: ' + this.runName);\n    } else if (this.productId < 0) {\n      throw new Error(`Invalid Product Id: ${this.productId}`);\n    } else if (autoApiUrl == undefined || autoApiUrl.length <= 0) {\n      throw new Error('Invalid URL: ' + autoApiUrl);\n    }\n\n    // Setup our Http Client\n    this.autoApi = new AutoApi({\n      clientConfig: {\n        apiKey,\n        baseUrl: autoApiUrl,\n      },\n      productId: this.productId,\n      groupingName: this.runName,\n    });\n\n    // Add in listener hooks\n    this.registerListeners(options.eventBroadcaster);\n  }\n\n  /**\n   * Registering an event listener to Cucumber's Messaging Api. Only one event will\n   * be contained in each envelope\n   *\n   * @param eventBroadcaster An Event Emitter\n   */\n  registerListeners(eventBroadcaster: EventEmitter): void {\n    eventBroadcaster.on('envelope', (envelope: Envelope) => {\n      if (envelope.testCase) {\n        this.onTestCasePrepared(envelope.testCase);\n      } else if (envelope.pickle) {\n        this.pickleMap[envelope.pickle.id] = envelope.pickle;\n      } else if (envelope.testCaseStarted) {\n        this.onTestCaseStarted(envelope.testCaseStarted);\n      } else if (envelope.testStepFinished) {\n        this.onTestStepFinished(envelope.testStepFinished);\n      } else if (envelope.testCaseFinished) {\n        void this.onTestCaseFinished(envelope.testCaseFinished);\n      }\n    });\n  }\n\n  /**\n   * Hook called when a test case is parsed. Used for storing information about a TestCase\n   *\n   * @param event The Test Case Event\n   */\n  onTestCasePrepared(event: TestCase): void {\n    this.testCaseStorage[event.id] = event;\n  }\n\n  /**\n   * Hook called when a single instance of a test case is started. Used to register the start of a TestCase\n   *\n   * @param event The Test Case Started Event\n   */\n  onTestCaseStarted(event: TestCaseStarted): void {\n    this.testCaseInstanceMap[event.id] = event.testCaseId;\n    const testCase = this.testCaseStorage[event.testCaseId];\n    // These messages happen async from the execution of the test cases. That means that we need\n    this.testCaseInstanceResultIdMap[event.id] = this.autoApi\n      .startTestCase(this.pickleMap[testCase.pickleId].name)\n      .then(res => res.data.testResultId);\n    this.testResultStatusMap[event.id] = [TestResultStatus.PASSED, undefined];\n  }\n\n  /**\n   * Hook called when a TestStep is finished. Used to tell if and when a TestCase fails.\n   *\n   * @param event The Test Step Finished Event\n   */\n  onTestStepFinished(event: TestStepFinished): void {\n    // We already assume that the test case will pass, so if it did, just move on\n    if (event.testStepResult.status == TestStepResultStatus.PASSED) {\n      return;\n    }\n\n    const currentStatus = this.testResultStatusMap[event.testCaseStartedId][0];\n    // If the current result already has a status set, don't override it\n    if (currentStatus != TestResultStatus.PASSED) {\n      return;\n    }\n\n    // Get the test case ID\n    const testCaseId = this.testCaseInstanceMap[event.testCaseStartedId];\n\n    // Lookup the TestCase\n    const testCase = this.testCaseStorage[testCaseId];\n\n    // Look for the TestStep that was executed\n    const testStepOptions = testCase.testSteps.filter(\n      s => s?.id == event.testStepId\n    );\n    if (testStepOptions && testStepOptions.length != 1) {\n      throw new Error('Could not find test step within the test case');\n    }\n\n    // Now that we have the test step, lets look it up in the pickle to get the actual step text\n    const pickle = this.pickleMap[testCase.pickleId];\n    const pickleStepId = testStepOptions[0].pickleStepId;\n    const pickleStep = pickle.steps.filter(step => step.id == pickleStepId)[0];\n\n    // Map the step status to a result status\n    let result: [TestResultStatus, string | undefined];\n    switch (event.testStepResult.status) {\n      case TestStepResultStatus.FAILED:\n        result = [\n          TestResultStatus.FAILED,\n          'Test Failed at Step: ' + pickleStep.text,\n        ];\n        break;\n      case TestStepResultStatus.AMBIGUOUS:\n        result = [\n          TestResultStatus.ERROR,\n          'Ambiguous Test Step Status at Step: ' + pickleStep.text,\n        ];\n        break;\n      case TestStepResultStatus.PENDING:\n        result = [\n          TestResultStatus.ERROR,\n          'Pending TestStep Status at Step: ' + pickleStep.text,\n        ];\n        break;\n      case TestStepResultStatus.SKIPPED:\n        result = [\n          TestResultStatus.SKIPPED,\n          'Test Skipped at Step: ' + pickleStep.text,\n        ];\n        break;\n      case TestStepResultStatus.UNDEFINED:\n        result = [\n          TestResultStatus.ERROR,\n          'Undefined Test Step Status at Step: ' + pickleStep.text,\n        ];\n        break;\n      case TestStepResultStatus.UNKNOWN:\n        result = [\n          TestResultStatus.FAILED,\n          'Unknown Test Step Status at Step: ' + pickleStep.text,\n        ];\n        break;\n    }\n\n    // Finally, save off the updated statuses\n    this.testResultStatusMap[event.testCaseStartedId] = result;\n  }\n\n  /**\n   * Hook called when a TestCase finishes it's execution. USed to submit test results to AutoApi\n   *\n   * @param event The TestCaseFinished event\n   */\n  async onTestCaseFinished(event: TestCaseFinished): Promise<void> {\n    // Wait for the test result to be created before starting the result submission\n    const resultId = await this.testCaseInstanceResultIdMap[\n      event.testCaseStartedId\n    ];\n    // Pull the TestResults from the TestResultStatusMap\n    const [status, failure] = this.testResultStatusMap[event.testCaseStartedId];\n\n    // Finally, submit the TestResult\n    void (await this.autoApi.submitTestResult(\n      resultId,\n      status || TestResultStatus.PASSED,\n      failure\n    ));\n  }\n}\n"],"names":["Formatter","AutoApi","TestResultStatus","TestStepResultStatus"],"mappings":"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"}
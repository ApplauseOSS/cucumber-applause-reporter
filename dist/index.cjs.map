{"version":3,"file":"index.cjs","sources":["../src/hooks.ts","../src/index.ts"],"sourcesContent":["import { IWorld } from '@cucumber/cucumber';\n\nexport const APPLAUSE_SESSION_ID_ATTACHMENT = 'applause-session-id';\n\nexport function linkSessionId(this: IWorld<any>, sessionId: string) {\n  this.attach(sessionId, {\n    fileName: APPLAUSE_SESSION_ID_ATTACHMENT,\n    mediaType: 'text/plain',\n  });\n}\n","import { Formatter, IFormatterOptions } from '@cucumber/cucumber';\nimport {\n  ApplauseReporter,\n  TestRailOptions,\n  TestResultStatus,\n  loadConfig,\n} from 'applause-reporter-common';\nimport { EventEmitter } from 'events';\nimport {\n  Envelope,\n  Pickle,\n  PickleStep,\n  TestCase,\n  TestCaseFinished,\n  TestCaseStarted,\n  TestStep,\n  TestStepFinished,\n  TestStepResultStatus,\n} from '@cucumber/messages';\nimport { APPLAUSE_SESSION_ID_ATTACHMENT } from './hooks';\n\nexport default class CucumberAutoApiFormatter extends Formatter {\n  private reporter: ApplauseReporter;\n\n  // Maps used to handle data lookup between events.\n  // Test Case Storage Handles Storing Information about a TestCase by the TestCaseId\n  private testCaseStorage: Record<string, TestCase> = {};\n  // Test Case Instance Map Maps a TestCaseInstance Id (Single Execution of a TestCase) to the TestCaseId\n  private testCaseInstanceMap: Record<string, string> = {};\n  private testCaseInstanceSessionMap: Record<string, string[]> = {};\n  // Pickle Map Holds Information about the Gherkin TestCase Information (The actual written out test case)\n  private pickleMap: { [pickleId: string]: Pickle } = {};\n  // TestResult Status Map keeps track of the status for a TestCaseInstance. If a step fails, the test case fails\n  private testResultStatusMap: {\n    [testCaseInstanceId: string]: [TestResultStatus, string | undefined];\n  } = {};\n\n  private readonly REMOVE_CONTROL_CHARS: RegExp = new RegExp(\n    /* eslint-disable-next-line no-control-regex */\n    /[^\\x00-\\x7F]/gm\n  );\n  private readonly REMOVE_ANSI_CHARACTERS: RegExp = new RegExp(\n    /* eslint-disable-next-line no-control-regex */\n    [\n      '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n      '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))',\n    ].join('|'),\n    'gm'\n  );\n\n  constructor(options: IFormatterOptions) {\n    super(options);\n    console.log('CDP is: ' + process.cwd());\n    const config = loadConfig({\n      configFile: 'applause.json',\n      properties: {\n        apiKey: <string>options.parsedArgvOptions['apiKey'],\n        baseUrl: <string>options.parsedArgvOptions['autoApiUrl'],\n        productId: <number>options.parsedArgvOptions['productId'],\n        testRailOptions: <TestRailOptions>(\n          options.parsedArgvOptions['testRailOptions']\n        ),\n        applauseTestCycleId: <number>(\n          options.parsedArgvOptions['applauseTestCycleId']\n        ),\n      },\n    });\n\n    // Setup our Http Client\n    this.reporter = new ApplauseReporter(config);\n\n    // Add in listener hooks\n    this.registerListeners(options.eventBroadcaster);\n  }\n\n  /**\n   * Registering an event listener to Cucumber's Messaging Api. Only one event will\n   * be contained in each envelope\n   *\n   * @param eventBroadcaster An Event Emitter\n   */\n  registerListeners(eventBroadcaster: EventEmitter): void {\n    eventBroadcaster.on('envelope', (envelope: Envelope) => {\n      if (envelope.gherkinDocument) {\n        envelope.gherkinDocument.feature?.children.map(\n          child => child.scenario?.name\n        );\n      }\n      if (envelope.testRunStarted) {\n        this.reporter.runnerStart(\n          Object.values(this.testCaseStorage).map(\n            testCase => this.pickleMap[testCase.pickleId].name\n          )\n        );\n      } else if (envelope.attachment) {\n        if (envelope.attachment.fileName == APPLAUSE_SESSION_ID_ATTACHMENT) {\n          const testCaseStartedId = envelope.attachment.testCaseStartedId;\n          if (testCaseStartedId === undefined) {\n            return;\n          }\n          const existingSessions =\n            this.testCaseInstanceSessionMap[testCaseStartedId] || [];\n          this.testCaseInstanceSessionMap[testCaseStartedId] = [\n            ...existingSessions,\n            envelope.attachment.body,\n          ];\n        }\n      } else if (envelope.testCase) {\n        this.testCaseStorage[envelope.testCase.id] = envelope.testCase;\n      } else if (envelope.pickle) {\n        this.pickleMap[envelope.pickle.id] = envelope.pickle;\n      } else if (envelope.testCaseStarted) {\n        this.onTestCaseStarted(envelope.testCaseStarted);\n      } else if (envelope.testStepFinished) {\n        this.onTestStepFinished(envelope.testStepFinished);\n      } else if (envelope.testCaseFinished) {\n        void this.onTestCaseFinished(envelope.testCaseFinished);\n      } else if (envelope.testRunFinished) {\n        void this.reporter.runnerEnd();\n      }\n    });\n  }\n\n  /**\n   * Hook called when a single instance of a test case is started. Used to register the start of a TestCase\n   *\n   * @param event The Test Case Started Event\n   */\n  onTestCaseStarted(event: TestCaseStarted): void {\n    this.testCaseInstanceMap[event.id] = event.testCaseId;\n    const testCase = this.testCaseStorage[event.testCaseId];\n    this.reporter.startTestCase(\n      testCase.id,\n      this.pickleMap[testCase.pickleId].name,\n      { providerSessionIds: this.testCaseInstanceSessionMap[event.id] || [] }\n    );\n    this.testResultStatusMap[event.id] = [TestResultStatus.PASSED, undefined];\n  }\n\n  /**\n   * Hook called when a TestStep is finished. Used to tell if and when a TestCase fails.\n   *\n   * @param event The Test Step Finished Event\n   */\n  onTestStepFinished(event: TestStepFinished): void {\n    // We already assume that the test case will pass, so if it did, just move on\n    if (event.testStepResult.status == TestStepResultStatus.PASSED) {\n      return;\n    }\n\n    const currentStatus = this.testResultStatusMap[event.testCaseStartedId][0];\n    // If the current result already has a status set, don't override it\n    if (currentStatus != TestResultStatus.PASSED) {\n      return;\n    }\n\n    // Get the test case ID\n    const testCaseId = this.testCaseInstanceMap[event.testCaseStartedId];\n\n    // Lookup the TestCase\n    const testCase = this.testCaseStorage[testCaseId];\n\n    // Look for the TestStep that was executed\n    const testStepOptions: TestStep[] = testCase.testSteps.filter(\n      s => s.id == event.testStepId\n    );\n    if (testStepOptions && testStepOptions.length != 1) {\n      throw new Error('Could not find test step within the test case');\n    }\n\n    // Now that we have the test step, lets look it up in the pickle to get the actual step text\n    const pickle: Pickle | undefined = this.pickleMap[testCase.pickleId];\n    const pickleStepId: string | undefined = testStepOptions[0].pickleStepId;\n    const pickleSteps: readonly PickleStep[] = pickle ? pickle.steps : [];\n    const pickleStep: PickleStep | undefined = pickleSteps.filter(\n      step => step.id == pickleStepId\n    )[0];\n\n    const stepText: string | undefined = pickleStep\n      ? pickleStep.text\n      : undefined;\n\n    // Map the step status to a result status\n    let status: TestResultStatus;\n    switch (event.testStepResult.status) {\n      case TestStepResultStatus.FAILED:\n        status = TestResultStatus.FAILED;\n        break;\n      case TestStepResultStatus.AMBIGUOUS:\n        status = TestResultStatus.ERROR;\n        break;\n      case TestStepResultStatus.PENDING:\n        status = TestResultStatus.ERROR;\n        break;\n      case TestStepResultStatus.SKIPPED:\n        status = TestResultStatus.SKIPPED;\n        break;\n      case TestStepResultStatus.UNDEFINED:\n        status = TestResultStatus.ERROR;\n        break;\n      case TestStepResultStatus.UNKNOWN:\n        status = TestResultStatus.FAILED;\n        break;\n    }\n    const cucumberMessage = this.cleanCucumberMessage(\n      event.testStepResult.message || 'Unknown'\n    );\n    let errorMessage: string;\n    if (stepText != undefined) {\n      errorMessage = `${event.testStepResult.status} Test Step: ${stepText}. Reason: ${cucumberMessage}`;\n    } else {\n      errorMessage = `Test Case ${event.testStepResult.status} at Unknown Step. Reason: ${cucumberMessage}`;\n    }\n    // Finally, save off the updated statuses\n    this.testResultStatusMap[event.testCaseStartedId] = [status, errorMessage];\n  }\n\n  /**\n   * Hook called when a TestCase finishes it's execution. USed to submit test results to AutoApi\n   *\n   * @param event The TestCaseFinished event\n   */\n  onTestCaseFinished(event: TestCaseFinished): void {\n    // Pull the TestResults from the TestResultStatusMap\n    const [status, failure] = this.testResultStatusMap[event.testCaseStartedId];\n\n    const testCaseId = this.testCaseInstanceMap[event.testCaseStartedId];\n\n    // Finally, submit the TestResult\n    this.reporter.submitTestCaseResult(\n      testCaseId,\n      status || TestResultStatus.PASSED,\n      {\n        failureReason: failure,\n        providerSessionGuids:\n          this.testCaseInstanceSessionMap[event.testCaseStartedId] || [],\n      }\n    );\n  }\n\n  private cleanCucumberMessage(message: string): string {\n    return message\n      .replace(this.REMOVE_ANSI_CHARACTERS, '')\n      .replace(this.REMOVE_CONTROL_CHARS, '');\n  }\n}\n\nexport * from './hooks.ts';\n"],"names":["Formatter","loadConfig","ApplauseReporter","TestResultStatus","TestStepResultStatus"],"mappings":"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"}
{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { Formatter } from '@cucumber/cucumber';\nimport { ApplauseReporter, TestResultStatus, loadConfig, } from 'applause-reporter-common';\nimport { TestStepResultStatus, } from '@cucumber/messages';\nexport default class CucumberAutoApiFormatter extends Formatter {\n    constructor(options) {\n        super(options);\n        // Maps used to handle data lookup between events.\n        // Test Case Storage Handles Storing Information about a TestCase by the TestCaseId\n        this.testCaseStorage = {};\n        // Test Case Instance Map Maps a TestCaseInstance Id (Single Execution of a TestCase) to the TestCaseId\n        this.testCaseInstanceMap = {};\n        // Pickle Map Holds Information about the Gherkin TestCase Information (The actual written out test case)\n        this.pickleMap = {};\n        // TestResult Status Map keeps track of the status for a TestCaseInstance. If a step fails, the test case fails\n        this.testResultStatusMap = {};\n        this.REMOVE_CONTROL_CHARS = new RegExp(\n        /* eslint-disable-next-line no-control-regex */\n        /[^\\x00-\\x7F]/gm);\n        this.REMOVE_ANSI_CHARACTERS = new RegExp(\n        /* eslint-disable-next-line no-control-regex */\n        [\n            '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n            '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))',\n        ].join('|'), 'gm');\n        console.log('CDP is: ' + process.cwd());\n        const config = loadConfig({\n            configFile: 'applause.json',\n            properties: {\n                apiKey: options.parsedArgvOptions['apiKey'],\n                baseUrl: options.parsedArgvOptions['autoApiUrl'],\n                productId: options.parsedArgvOptions['productId'],\n                testRailOptions: (options.parsedArgvOptions['testRailOptions']),\n                applauseTestCycleId: (options.parsedArgvOptions['applauseTestCycleId']),\n            },\n        });\n        // Setup our Http Client\n        this.reporter = new ApplauseReporter(config);\n        // Add in listener hooks\n        this.registerListeners(options.eventBroadcaster);\n    }\n    /**\n     * Registering an event listener to Cucumber's Messaging Api. Only one event will\n     * be contained in each envelope\n     *\n     * @param eventBroadcaster An Event Emitter\n     */\n    registerListeners(eventBroadcaster) {\n        eventBroadcaster.on('envelope', (envelope) => {\n            if (envelope.gherkinDocument) {\n                envelope.gherkinDocument.feature?.children.map(child => child.scenario?.name);\n            }\n            if (envelope.testRunStarted) {\n                this.reporter.runnerStart();\n            }\n            else if (envelope.testCase) {\n                this.onTestCasePrepared(envelope.testCase);\n            }\n            else if (envelope.pickle) {\n                this.pickleMap[envelope.pickle.id] = envelope.pickle;\n            }\n            else if (envelope.testCaseStarted) {\n                this.onTestCaseStarted(envelope.testCaseStarted);\n            }\n            else if (envelope.testStepFinished) {\n                this.onTestStepFinished(envelope.testStepFinished);\n            }\n            else if (envelope.testCaseFinished) {\n                void this.onTestCaseFinished(envelope.testCaseFinished);\n            }\n            else if (envelope.testRunFinished) {\n                void this.reporter.runnerEnd();\n            }\n        });\n    }\n    /**\n     * Hook called when a test case is parsed. Used for storing information about a TestCase\n     *\n     * @param event The Test Case Event\n     */\n    onTestCasePrepared(event) {\n        this.testCaseStorage[event.id] = event;\n    }\n    /**\n     * Hook called when a single instance of a test case is started. Used to register the start of a TestCase\n     *\n     * @param event The Test Case Started Event\n     */\n    onTestCaseStarted(event) {\n        this.testCaseInstanceMap[event.id] = event.testCaseId;\n        const testCase = this.testCaseStorage[event.testCaseId];\n        this.reporter.startTestCase(testCase.id, this.pickleMap[testCase.pickleId].name);\n        this.testResultStatusMap[event.id] = [TestResultStatus.PASSED, undefined];\n    }\n    /**\n     * Hook called when a TestStep is finished. Used to tell if and when a TestCase fails.\n     *\n     * @param event The Test Step Finished Event\n     */\n    onTestStepFinished(event) {\n        // We already assume that the test case will pass, so if it did, just move on\n        if (event.testStepResult.status == TestStepResultStatus.PASSED) {\n            return;\n        }\n        const currentStatus = this.testResultStatusMap[event.testCaseStartedId][0];\n        // If the current result already has a status set, don't override it\n        if (currentStatus != TestResultStatus.PASSED) {\n            return;\n        }\n        // Get the test case ID\n        const testCaseId = this.testCaseInstanceMap[event.testCaseStartedId];\n        // Lookup the TestCase\n        const testCase = this.testCaseStorage[testCaseId];\n        // Look for the TestStep that was executed\n        const testStepOptions = testCase.testSteps.filter(s => s.id == event.testStepId);\n        if (testStepOptions && testStepOptions.length != 1) {\n            throw new Error('Could not find test step within the test case');\n        }\n        // Now that we have the test step, lets look it up in the pickle to get the actual step text\n        const pickle = this.pickleMap[testCase.pickleId];\n        const pickleStepId = testStepOptions[0].pickleStepId;\n        const pickleSteps = pickle ? pickle.steps : [];\n        const pickleStep = pickleSteps.filter(step => step.id == pickleStepId)[0];\n        const stepText = pickleStep\n            ? pickleStep.text\n            : undefined;\n        // Map the step status to a result status\n        let status;\n        switch (event.testStepResult.status) {\n            case TestStepResultStatus.FAILED:\n                status = TestResultStatus.FAILED;\n                break;\n            case TestStepResultStatus.AMBIGUOUS:\n                status = TestResultStatus.ERROR;\n                break;\n            case TestStepResultStatus.PENDING:\n                status = TestResultStatus.ERROR;\n                break;\n            case TestStepResultStatus.SKIPPED:\n                status = TestResultStatus.SKIPPED;\n                break;\n            case TestStepResultStatus.UNDEFINED:\n                status = TestResultStatus.ERROR;\n                break;\n            case TestStepResultStatus.UNKNOWN:\n                status = TestResultStatus.FAILED;\n                break;\n        }\n        const cucumberMessage = this.cleanCucumberMessage(event.testStepResult.message || 'Unknown');\n        let errorMessage;\n        if (stepText != undefined) {\n            errorMessage = `${event.testStepResult.status} Test Step: ${stepText}. Reason: ${cucumberMessage}`;\n        }\n        else {\n            errorMessage = `Test Case ${event.testStepResult.status} at Unknown Step. Reason: ${cucumberMessage}`;\n        }\n        // Finally, save off the updated statuses\n        this.testResultStatusMap[event.testCaseStartedId] = [status, errorMessage];\n    }\n    /**\n     * Hook called when a TestCase finishes it's execution. USed to submit test results to AutoApi\n     *\n     * @param event The TestCaseFinished event\n     */\n    onTestCaseFinished(event) {\n        // Pull the TestResults from the TestResultStatusMap\n        const [status, failure] = this.testResultStatusMap[event.testCaseStartedId];\n        const testCaseId = this.testCaseInstanceMap[event.testCaseStartedId];\n        // Finally, submit the TestResult\n        this.reporter.submitTestCaseResult(testCaseId, status || TestResultStatus.PASSED, { failureReason: failure });\n    }\n    cleanCucumberMessage(message) {\n        return message\n            .replace(this.REMOVE_ANSI_CHARACTERS, '')\n            .replace(this.REMOVE_CONTROL_CHARS, '');\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}
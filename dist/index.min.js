!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("@cucumber/cucumber"),require("applause-reporter-common"),require("@cucumber/messages")):"function"==typeof define&&define.amd?define(["@cucumber/cucumber","applause-reporter-common","@cucumber/messages"],e):(t="undefined"!=typeof globalThis?globalThis:t||self)["cucumber-applause-reporter"]=e(t.cucumber,t.autoApiClient,t.messages)}(this,(function(t,e,s){"use strict";class a extends t.Formatter{constructor(t){super(t),this.testCaseStorage={},this.testCaseInstanceMap={},this.testCaseInstanceResultIdMap={},this.pickleMap={},this.testResultStatusMap={};const s=t.parsedArgvOptions.apiKey,a=t.parsedArgvOptions.autoApiUrl;if(this.runName=t.parsedArgvOptions.runName,this.productId=t.parsedArgvOptions.productId,null==s||s.length<=0)throw new Error("Invalid Api Key");if(null==this.runName||this.runName.length<=0)throw new Error("Invalid Run Name: "+this.runName);if(this.productId<0)throw new Error(`Invalid Product Id: ${this.productId}`);if(null==a||a.length<=0)throw new Error("Invalid URL: "+a);this.autoApi=new e.AutoApi({clientConfig:{apiKey:s,baseUrl:a},productId:this.productId,groupingName:this.runName}),this.registerListeners(t.eventBroadcaster)}registerListeners(t){t.on("envelope",(t=>{t.testCase?this.onTestCasePrepared(t.testCase):t.pickle?this.pickleMap[t.pickle.id]=t.pickle:t.testCaseStarted?this.onTestCaseStarted(t.testCaseStarted):t.testStepFinished?this.onTestStepFinished(t.testStepFinished):t.testCaseFinished&&this.onTestCaseFinished(t.testCaseFinished)}))}onTestCasePrepared(t){this.testCaseStorage[t.id]=t}onTestCaseStarted(t){this.testCaseInstanceMap[t.id]=t.testCaseId;const s=this.testCaseStorage[t.testCaseId];this.testCaseInstanceResultIdMap[t.id]=this.autoApi.startTestCase(this.pickleMap[s.pickleId].name).then((t=>t.data.testResultId)),this.testResultStatusMap[t.id]=[e.TestResultStatus.PASSED,void 0]}onTestStepFinished(t){if(t.testStepResult.status==s.TestStepResultStatus.PASSED)return;if(this.testResultStatusMap[t.testCaseStartedId][0]!=e.TestResultStatus.PASSED)return;const a=this.testCaseInstanceMap[t.testCaseStartedId],i=this.testCaseStorage[a],u=i.testSteps.filter((e=>e.id==t.testStepId));if(u&&1!=u.length)throw new Error("Could not find test step within the test case");const r=this.pickleMap[i.pickleId],n=u[0].pickleStepId,p=(r?r.steps:[]).filter((t=>t.id==n))[0],o=p?p.text:void 0;let d,l;switch(t.testStepResult.status){case s.TestStepResultStatus.FAILED:d=e.TestResultStatus.FAILED;break;case s.TestStepResultStatus.AMBIGUOUS:case s.TestStepResultStatus.PENDING:d=e.TestResultStatus.ERROR;break;case s.TestStepResultStatus.SKIPPED:d=e.TestResultStatus.SKIPPED;break;case s.TestStepResultStatus.UNDEFINED:d=e.TestResultStatus.ERROR;break;case s.TestStepResultStatus.UNKNOWN:d=e.TestResultStatus.FAILED}l=null!=o?`${t.testStepResult.status} Test Step: ${o}. Reason: ${t.testStepResult.message||"Unknown"}`:`Test Case ${t.testStepResult.status} at Unknown Step. Reason: ${t.testStepResult.message||"Unknown"}`,this.testResultStatusMap[t.testCaseStartedId]=[d,l]}async onTestCaseFinished(t){const s=await this.testCaseInstanceResultIdMap[t.testCaseStartedId],[a,i]=this.testResultStatusMap[t.testCaseStartedId];await this.autoApi.submitTestResult(s,a||e.TestResultStatus.PASSED,i)}}return a}));
//# sourceMappingURL=index.min.js.map

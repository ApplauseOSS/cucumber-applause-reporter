!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("@cucumber/cucumber"),require("applause-reporter-common"),require("@cucumber/messages")):"function"==typeof define&&define.amd?define(["@cucumber/cucumber","applause-reporter-common","@cucumber/messages"],t):(e="undefined"!=typeof globalThis?globalThis:e||self)["cucumber-applause-reporter"]=t(e.cucumber,e.applauseReporterCommon,e.messages)}(this,(function(e,t,s){"use strict";class a extends e.Formatter{constructor(e){super(e),this.testCaseStorage={},this.testCaseInstanceMap={},this.pickleMap={},this.testResultStatusMap={},this.REMOVE_CONTROL_CHARS=new RegExp(/[^\x00-\x7F]/gm),this.REMOVE_ANSI_CHARACTERS=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"gm");const s=t.loadConfig({properties:{apiKey:e.parsedArgvOptions.apiKey,baseUrl:e.parsedArgvOptions.autoApiUrl,productId:e.parsedArgvOptions.productId,testRailOptions:e.parsedArgvOptions.testRailOptions,applauseTestCycleId:e.parsedArgvOptions.applauseTestCycleId}});this.reporter=new t.ApplauseReporter(s),this.registerListeners(e.eventBroadcaster)}registerListeners(e){e.on("envelope",(e=>{e.gherkinDocument&&e.gherkinDocument.feature?.children.map((e=>e.scenario?.name)),e.testRunStarted?this.reporter.runnerStart():e.testCase?this.onTestCasePrepared(e.testCase):e.pickle?this.pickleMap[e.pickle.id]=e.pickle:e.testCaseStarted?this.onTestCaseStarted(e.testCaseStarted):e.testStepFinished?this.onTestStepFinished(e.testStepFinished):e.testCaseFinished?this.onTestCaseFinished(e.testCaseFinished):e.testRunFinished&&this.reporter.runnerEnd()}))}onTestCasePrepared(e){this.testCaseStorage[e.id]=e}onTestCaseStarted(e){this.testCaseInstanceMap[e.id]=e.testCaseId;const s=this.testCaseStorage[e.testCaseId];this.reporter.startTestCase(s.id,this.pickleMap[s.pickleId].name),this.testResultStatusMap[e.id]=[t.TestResultStatus.PASSED,void 0]}onTestStepFinished(e){if(e.testStepResult.status==s.TestStepResultStatus.PASSED)return;if(this.testResultStatusMap[e.testCaseStartedId][0]!=t.TestResultStatus.PASSED)return;const a=this.testCaseInstanceMap[e.testCaseStartedId],r=this.testCaseStorage[a],i=r.testSteps.filter((t=>t.id==e.testStepId));if(i&&1!=i.length)throw new Error("Could not find test step within the test case");const u=this.pickleMap[r.pickleId],p=i[0].pickleStepId,n=(u?u.steps:[]).filter((e=>e.id==p))[0],o=n?n.text:void 0;let d;switch(e.testStepResult.status){case s.TestStepResultStatus.FAILED:d=t.TestResultStatus.FAILED;break;case s.TestStepResultStatus.AMBIGUOUS:case s.TestStepResultStatus.PENDING:d=t.TestResultStatus.ERROR;break;case s.TestStepResultStatus.SKIPPED:d=t.TestResultStatus.SKIPPED;break;case s.TestStepResultStatus.UNDEFINED:d=t.TestResultStatus.ERROR;break;case s.TestStepResultStatus.UNKNOWN:d=t.TestResultStatus.FAILED}const l=this.cleanCucumberMessage(e.testStepResult.message||"Unknown");let S;S=null!=o?`${e.testStepResult.status} Test Step: ${o}. Reason: ${l}`:`Test Case ${e.testStepResult.status} at Unknown Step. Reason: ${l}`,this.testResultStatusMap[e.testCaseStartedId]=[d,S]}onTestCaseFinished(e){const[s,a]=this.testResultStatusMap[e.testCaseStartedId],r=this.testCaseInstanceMap[e.testCaseStartedId];this.reporter.submitTestCaseResult(r,s||t.TestResultStatus.PASSED,{failureReason:a})}cleanCucumberMessage(e){return e.replace(this.REMOVE_ANSI_CHARACTERS,"").replace(this.REMOVE_CONTROL_CHARS,"")}}return a}));
//# sourceMappingURL=index.min.js.map
